from src.statistic import Statistics
from unittest import TestCase, main

TEXT = """
Ожегов Сергей Иванович & Шведова Наталия Юльевна
Толковый словарь русского языка

A

А, союз. 1. Соединяет предложения или члены предложения, выражая противопоставление, сопоставление. Он поехал, а я остался. Пиши ручкой, а не карандашом. Красив, а не умен. 2. Присоединяет предложения или члены предложения со значением добавления чего-н. при последовательном изложении, со значением пояснения, возражения, усиления, перехода к другой мысли. На горе дом, а под горой ручей. Было бы болото, а черти найдутся (посл.). Что ты. сегодня делаешь? а завтра? Он не виноват. - А кто же виноват, если не он? 3. Употр. в начале вопросительных и восклицательных предложений, а также в начале речи для усиления выразительности, убедительности (часто в сочетании с местоимениями, наречиями, другими союзами). А как нам будет весело! А все-таки я не согласен. * А также (и), союз - выражает присоединение, усилительное или сопоставительное добавление. Умелый водитель, а также и слесарь. Снимается в кино, а также и на телевидении. А то - 1) союз, в противном случае, иначе. Спеши, а то опоздаешь; 2) в действительности же, а на самом деле. Если бы было так, а то все наоборот; А то! (а то как же!) (прост.) - в ответной реплике выражает: 1) уверенное согласие, подтверждение. Замерз? - А то! Мороз на дворе; 2) ироническое несогласие, отрицание: Он пойдет?-А то! Дожидайся! А не то, союз - то же, что а то (в 1 знач.). А то и, союз - присоединяет сообщение о чем-н. нежелательном или неожиданном. Накричит, а то и побьет.
А2, частица (разг.). 1. Обозначает вопрос или отклик на чьи-н. слова. Пойдем гулять, а? Почему ты не отвечаешь? - А? Что такое? 2. Усиливает обращение. Ваня, а Ваня! 3. [произносится с различной степенью длительности]. Выражает уяснение, удовлетворенное понимание. А-а, так это были вы! Почему ты не звонил? - Не работал телефон! - А-а! А-а, так ват в чем дело!
А3 [произносится с различной степенью длительности], межд. Выражает досаду, горечь, а также удивление, злорадство и другие подобные чувства. Что я наделал? - А-а! А, попался!
А..., приставка. Образует существительные и прилагательные со знач. отсутствия (в словах с иноязычным корнем), то же, что "не", напр. асимметрия, алогичный, аморальный, аритмичный, асинхронный.
АБАЖУР, -а, м. Колпак для лампы, светильника. Зеленый а. 11 прил. абажурный, -ая, -ое.
АБАЗИНСКИЙ, -ая, -ое. 1. см. абазины. 2. Относящийся к абазинам, к их языку, национальному характеру, образу жизни, культуре, а также к территории их проживания, ее внутреннему устройству, истории; такой, как у абазин. А. язык (абхазско-адыгейской группы кавказских языков). По-абазински (нареч.).
АБАЗИНЫ, -ин, ед. -инец, -нца, м. Народ, живущий в Карачаево-Черкесии и в Адыгее. II ж. абазинка, -и. II прил, абазинский, -ая, -ое.
АББАТ, -а, м. 1. Настоятель мужского католического монастыря. 2. Католический священнослужитель. II прил. аббатский, -ая,-ое.
АББАТИCА, -ы, ж. Настоятельница женского католического монастыря.
АББАТСТВО, -а, ср. Католический монастырь.
"""

TEXT_SMALL = """
На мели мы налима лениво ловили,
Меняли налима вы мне на линя.
О любви не меня ли вы мило молили,
И в туманы лимана манили меня?
"""

MOST_COMMON = [('на', 2), ('налима', 2), ('вы', 2), ('меня', 2), ('мели', 1), ('мы', 1), ('лениво', 1), ('ловили', 1),
               ('меняли', 1), ('мне', 1), ('линя', 1), ('о', 1), ('любви', 1), ('не', 1), ('ли', 1), ('мило', 1),
               ('молили', 1), ('и', 1), ('в', 1), ('туманы', 1), ('лимана', 1), ('манили', 1)]

LESS_COMMON = [('манили', 1), ('лимана', 1), ('туманы', 1), ('в', 1), ('и', 1), ('молили', 1), ('мило', 1), ('ли', 1),
               ('не', 1), ('любви', 1), ('о', 1), ('линя', 1), ('мне', 1), ('меняли', 1), ('ловили', 1), ('лениво', 1),
               ('мы', 1), ('мели', 1), ('меня', 2), ('вы', 2), ('налима', 2), ('на', 2)]


class TestStatistics(TestCase):
    def test_default_init(self):
        stat = Statistics(TEXT)
        self.assertEqual(426, stat.words_count)
        self.assertEqual(261, stat.unique_words_count)
        expected = "Text statistic: words count=426, unique words count=261, 3 most common words=[('а', 34), " \
                   "('то', 13), ('в', 12)], 3 less common words=[('монастырь', 1), ('ср', 1), ('аббатство', 1)]"
        self.assertEqual(expected, str(stat))

    def test_another_ignored(self):
        stat = Statistics(TEXT, ignored='')
        self.assertEqual(452, stat.words_count)
        self.assertEqual(265, stat.unique_words_count)
        expected = "Text statistic: words count=452, unique words count=265, 3 most common words=[('а', 34), " \
                   "('то', 13), ('в', 12)], 3 less common words=[('монастырь', 1), ('ср', 1), ('аббатство', 1)]"
        self.assertEqual(expected, str(stat))

    def test_most_common(self):
        params = (
            (MOST_COMMON, -1),
            (MOST_COMMON, 0),
            ([('на', 2)], 1),
            ([('на', 2), ('налима', 2), ('вы', 2)], 3),
            (MOST_COMMON, 1000),
        )
        for expected, limit in params:
            with self.subTest(f'Test most_common {limit}'):
                stat = Statistics(TEXT_SMALL)
                result = stat.most_common(limit)
                self.assertEqual(expected, result)

    def test_less_common(self):
        params = (
            (LESS_COMMON, -1),
            (LESS_COMMON, 0),
            ([('манили', 1)], 1),
            ([('манили', 1), ('лимана', 1), ('туманы', 1)], 3),
            (LESS_COMMON, 1000),
        )
        for expected, limit in params:
            with self.subTest(f'Test less_common {limit}'):
                stat = Statistics(TEXT_SMALL)
                result = stat.less_common(limit)
                self.assertEqual(expected, result)

    def test_words_with_count(self):
        params = (
            (['я', 'со', 'ты', 'как', 'так', 'м', 'прил', 'ii'], 3, -1),
            (['я', 'со', 'ты', 'как', 'так', 'м', 'прил', 'ii'], 3, 0),
            (['союз'], 5, 1),
            (['союз', 'или', 'на'], 5, 3),
            (['союз', 'или', 'на', 'что', 'же'], 5, 5),
            (['союз', 'или', 'на', 'что', 'же'], 5, 15),
            (['то'], 13, 1000),
        )
        for expected, count, limit in params:
            with self.subTest(f'Test words_with_count {limit}'):
                stat = Statistics(TEXT)
                result = stat.words_with_count(count, limit=limit)
                self.assertEqual(expected, result)

    def test_words_with_length(self):
        params = (
            (['вопросительных', 'убедительности', 'прилагательные', 'настоятельница'], 14, -1),
            (['вопросительных', 'убедительности', 'прилагательные', 'настоятельница'], 14, 0),
            (['языка'], 5, 1),
            (['языка', 'члены', 'мысли'], 5, 3),
            (['языка', 'члены', 'мысли', 'горой', 'ручей'], 5, 5),
            (['вопросительных', 'убедительности', 'прилагательные', 'настоятельница'], 14, 15),
            (['вопросительных', 'убедительности', 'прилагательные', 'настоятельница'], 14, 1000),
        )
        for expected, length, limit in params:
            with self.subTest(f'Test words_with_count {limit}'):
                stat = Statistics(TEXT)
                result = stat.words_with_length(length, limit=limit)
                self.assertEqual(expected, result)


if __name__ == '__main__':
    main()
